// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: basecoat.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Basecoat_CreateAPIToken_FullMethodName                  = "/proto.Basecoat/CreateAPIToken"
	Basecoat_GetSystemInfo_FullMethodName                   = "/proto.Basecoat/GetSystemInfo"
	Basecoat_GetAccount_FullMethodName                      = "/proto.Basecoat/GetAccount"
	Basecoat_ListAccounts_FullMethodName                    = "/proto.Basecoat/ListAccounts"
	Basecoat_CreateAccount_FullMethodName                   = "/proto.Basecoat/CreateAccount"
	Basecoat_UpdateAccount_FullMethodName                   = "/proto.Basecoat/UpdateAccount"
	Basecoat_ToggleAccountState_FullMethodName              = "/proto.Basecoat/ToggleAccountState"
	Basecoat_GetFormula_FullMethodName                      = "/proto.Basecoat/GetFormula"
	Basecoat_ListFormulas_FullMethodName                    = "/proto.Basecoat/ListFormulas"
	Basecoat_CreateFormula_FullMethodName                   = "/proto.Basecoat/CreateFormula"
	Basecoat_AssociateFormulaWithJob_FullMethodName         = "/proto.Basecoat/AssociateFormulaWithJob"
	Basecoat_DisassociateFormulaFromJob_FullMethodName      = "/proto.Basecoat/DisassociateFormulaFromJob"
	Basecoat_UpdateFormula_FullMethodName                   = "/proto.Basecoat/UpdateFormula"
	Basecoat_DeleteFormula_FullMethodName                   = "/proto.Basecoat/DeleteFormula"
	Basecoat_GetBase_FullMethodName                         = "/proto.Basecoat/GetBase"
	Basecoat_ListBases_FullMethodName                       = "/proto.Basecoat/ListBases"
	Basecoat_CreateBase_FullMethodName                      = "/proto.Basecoat/CreateBase"
	Basecoat_AssociateBaseWithFormula_FullMethodName        = "/proto.Basecoat/AssociateBaseWithFormula"
	Basecoat_DisassociateBaseFromFormula_FullMethodName     = "/proto.Basecoat/DisassociateBaseFromFormula"
	Basecoat_UpdateBase_FullMethodName                      = "/proto.Basecoat/UpdateBase"
	Basecoat_DeleteBase_FullMethodName                      = "/proto.Basecoat/DeleteBase"
	Basecoat_GetColorant_FullMethodName                     = "/proto.Basecoat/GetColorant"
	Basecoat_ListColorants_FullMethodName                   = "/proto.Basecoat/ListColorants"
	Basecoat_CreateColorant_FullMethodName                  = "/proto.Basecoat/CreateColorant"
	Basecoat_AssociateColorantWithFormula_FullMethodName    = "/proto.Basecoat/AssociateColorantWithFormula"
	Basecoat_DisassociateColorantFromFormula_FullMethodName = "/proto.Basecoat/DisassociateColorantFromFormula"
	Basecoat_UpdateColorant_FullMethodName                  = "/proto.Basecoat/UpdateColorant"
	Basecoat_DeleteColorant_FullMethodName                  = "/proto.Basecoat/DeleteColorant"
	Basecoat_GetContact_FullMethodName                      = "/proto.Basecoat/GetContact"
	Basecoat_ListContacts_FullMethodName                    = "/proto.Basecoat/ListContacts"
	Basecoat_CreateContact_FullMethodName                   = "/proto.Basecoat/CreateContact"
	Basecoat_UpdateContact_FullMethodName                   = "/proto.Basecoat/UpdateContact"
	Basecoat_DeleteContact_FullMethodName                   = "/proto.Basecoat/DeleteContact"
	Basecoat_GetContractor_FullMethodName                   = "/proto.Basecoat/GetContractor"
	Basecoat_ListContractors_FullMethodName                 = "/proto.Basecoat/ListContractors"
	Basecoat_CreateContractor_FullMethodName                = "/proto.Basecoat/CreateContractor"
	Basecoat_UpdateContractor_FullMethodName                = "/proto.Basecoat/UpdateContractor"
	Basecoat_DeleteContractor_FullMethodName                = "/proto.Basecoat/DeleteContractor"
	Basecoat_GetJob_FullMethodName                          = "/proto.Basecoat/GetJob"
	Basecoat_ListJobs_FullMethodName                        = "/proto.Basecoat/ListJobs"
	Basecoat_CreateJob_FullMethodName                       = "/proto.Basecoat/CreateJob"
	Basecoat_UpdateJob_FullMethodName                       = "/proto.Basecoat/UpdateJob"
	Basecoat_DeleteJob_FullMethodName                       = "/proto.Basecoat/DeleteJob"
)

// BasecoatClient is the client API for Basecoat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BasecoatClient interface {
	// Authentication routes
	CreateAPIToken(ctx context.Context, in *CreateAPITokenRequest, opts ...grpc.CallOption) (*CreateAPITokenResponse, error)
	// System routes
	GetSystemInfo(ctx context.Context, in *GetSystemInfoRequest, opts ...grpc.CallOption) (*GetSystemInfoResponse, error)
	// Account routes (Admin only)
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error)
	ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error)
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error)
	ToggleAccountState(ctx context.Context, in *ToggleAccountStateRequest, opts ...grpc.CallOption) (*ToggleAccountStateResponse, error)
	// Formula routes
	GetFormula(ctx context.Context, in *GetFormulaRequest, opts ...grpc.CallOption) (*GetFormulaResponse, error)
	ListFormulas(ctx context.Context, in *ListFormulasRequest, opts ...grpc.CallOption) (*ListFormulasResponse, error)
	CreateFormula(ctx context.Context, in *CreateFormulaRequest, opts ...grpc.CallOption) (*CreateFormulaResponse, error)
	AssociateFormulaWithJob(ctx context.Context, in *AssociateFormulaWithJobRequest, opts ...grpc.CallOption) (*AssociateFormulaWithJobResponse, error)
	DisassociateFormulaFromJob(ctx context.Context, in *DisassociateFormulaFromJobRequest, opts ...grpc.CallOption) (*DisassociateFormulaFromJobResponse, error)
	UpdateFormula(ctx context.Context, in *UpdateFormulaRequest, opts ...grpc.CallOption) (*UpdateFormulaResponse, error)
	DeleteFormula(ctx context.Context, in *DeleteFormulaRequest, opts ...grpc.CallOption) (*DeleteFormulaResponse, error)
	// Base routes
	GetBase(ctx context.Context, in *GetBaseRequest, opts ...grpc.CallOption) (*GetBaseResponse, error)
	ListBases(ctx context.Context, in *ListBasesRequest, opts ...grpc.CallOption) (*ListBasesResponse, error)
	CreateBase(ctx context.Context, in *CreateBaseRequest, opts ...grpc.CallOption) (*CreateBaseResponse, error)
	AssociateBaseWithFormula(ctx context.Context, in *AssociateBaseWithFormulaRequest, opts ...grpc.CallOption) (*AssociateBaseWithFormulaResponse, error)
	DisassociateBaseFromFormula(ctx context.Context, in *DisassociateBaseFromFormulaRequest, opts ...grpc.CallOption) (*DisassociateBaseFromFormulaResponse, error)
	UpdateBase(ctx context.Context, in *UpdateBaseRequest, opts ...grpc.CallOption) (*UpdateBaseResponse, error)
	DeleteBase(ctx context.Context, in *DeleteBaseRequest, opts ...grpc.CallOption) (*DeleteBaseResponse, error)
	// Colorant routes
	GetColorant(ctx context.Context, in *GetColorantRequest, opts ...grpc.CallOption) (*GetColorantResponse, error)
	ListColorants(ctx context.Context, in *ListColorantsRequest, opts ...grpc.CallOption) (*ListColorantsResponse, error)
	CreateColorant(ctx context.Context, in *CreateColorantRequest, opts ...grpc.CallOption) (*CreateColorantResponse, error)
	AssociateColorantWithFormula(ctx context.Context, in *AssociateColorantWithFormulaRequest, opts ...grpc.CallOption) (*AssociateColorantWithFormulaResponse, error)
	DisassociateColorantFromFormula(ctx context.Context, in *DisassociateColorantFromFormulaRequest, opts ...grpc.CallOption) (*DisassociateColorantFromFormulaResponse, error)
	UpdateColorant(ctx context.Context, in *UpdateColorantRequest, opts ...grpc.CallOption) (*UpdateColorantResponse, error)
	DeleteColorant(ctx context.Context, in *DeleteColorantRequest, opts ...grpc.CallOption) (*DeleteColorantResponse, error)
	// Contact routes
	GetContact(ctx context.Context, in *GetContactRequest, opts ...grpc.CallOption) (*GetContactResponse, error)
	ListContacts(ctx context.Context, in *ListContactsRequest, opts ...grpc.CallOption) (*ListContactsResponse, error)
	CreateContact(ctx context.Context, in *CreateContactRequest, opts ...grpc.CallOption) (*CreateContactResponse, error)
	UpdateContact(ctx context.Context, in *UpdateContactRequest, opts ...grpc.CallOption) (*UpdateContactResponse, error)
	DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*DeleteContactResponse, error)
	// Contractor routes
	GetContractor(ctx context.Context, in *GetContractorRequest, opts ...grpc.CallOption) (*GetContractorResponse, error)
	ListContractors(ctx context.Context, in *ListContractorsRequest, opts ...grpc.CallOption) (*ListContractorsResponse, error)
	CreateContractor(ctx context.Context, in *CreateContractorRequest, opts ...grpc.CallOption) (*CreateContractorResponse, error)
	UpdateContractor(ctx context.Context, in *UpdateContractorRequest, opts ...grpc.CallOption) (*UpdateContractorResponse, error)
	DeleteContractor(ctx context.Context, in *DeleteContractorRequest, opts ...grpc.CallOption) (*DeleteContractorResponse, error)
	// Job routes
	GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error)
	ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListJobsResponse, error)
	CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*CreateJobResponse, error)
	UpdateJob(ctx context.Context, in *UpdateJobRequest, opts ...grpc.CallOption) (*UpdateJobResponse, error)
	DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*DeleteJobResponse, error)
}

type basecoatClient struct {
	cc grpc.ClientConnInterface
}

func NewBasecoatClient(cc grpc.ClientConnInterface) BasecoatClient {
	return &basecoatClient{cc}
}

func (c *basecoatClient) CreateAPIToken(ctx context.Context, in *CreateAPITokenRequest, opts ...grpc.CallOption) (*CreateAPITokenResponse, error) {
	out := new(CreateAPITokenResponse)
	err := c.cc.Invoke(ctx, Basecoat_CreateAPIToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) GetSystemInfo(ctx context.Context, in *GetSystemInfoRequest, opts ...grpc.CallOption) (*GetSystemInfoResponse, error) {
	out := new(GetSystemInfoResponse)
	err := c.cc.Invoke(ctx, Basecoat_GetSystemInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	out := new(GetAccountResponse)
	err := c.cc.Invoke(ctx, Basecoat_GetAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error) {
	out := new(ListAccountsResponse)
	err := c.cc.Invoke(ctx, Basecoat_ListAccounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, Basecoat_CreateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error) {
	out := new(UpdateAccountResponse)
	err := c.cc.Invoke(ctx, Basecoat_UpdateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) ToggleAccountState(ctx context.Context, in *ToggleAccountStateRequest, opts ...grpc.CallOption) (*ToggleAccountStateResponse, error) {
	out := new(ToggleAccountStateResponse)
	err := c.cc.Invoke(ctx, Basecoat_ToggleAccountState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) GetFormula(ctx context.Context, in *GetFormulaRequest, opts ...grpc.CallOption) (*GetFormulaResponse, error) {
	out := new(GetFormulaResponse)
	err := c.cc.Invoke(ctx, Basecoat_GetFormula_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) ListFormulas(ctx context.Context, in *ListFormulasRequest, opts ...grpc.CallOption) (*ListFormulasResponse, error) {
	out := new(ListFormulasResponse)
	err := c.cc.Invoke(ctx, Basecoat_ListFormulas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) CreateFormula(ctx context.Context, in *CreateFormulaRequest, opts ...grpc.CallOption) (*CreateFormulaResponse, error) {
	out := new(CreateFormulaResponse)
	err := c.cc.Invoke(ctx, Basecoat_CreateFormula_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) AssociateFormulaWithJob(ctx context.Context, in *AssociateFormulaWithJobRequest, opts ...grpc.CallOption) (*AssociateFormulaWithJobResponse, error) {
	out := new(AssociateFormulaWithJobResponse)
	err := c.cc.Invoke(ctx, Basecoat_AssociateFormulaWithJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) DisassociateFormulaFromJob(ctx context.Context, in *DisassociateFormulaFromJobRequest, opts ...grpc.CallOption) (*DisassociateFormulaFromJobResponse, error) {
	out := new(DisassociateFormulaFromJobResponse)
	err := c.cc.Invoke(ctx, Basecoat_DisassociateFormulaFromJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) UpdateFormula(ctx context.Context, in *UpdateFormulaRequest, opts ...grpc.CallOption) (*UpdateFormulaResponse, error) {
	out := new(UpdateFormulaResponse)
	err := c.cc.Invoke(ctx, Basecoat_UpdateFormula_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) DeleteFormula(ctx context.Context, in *DeleteFormulaRequest, opts ...grpc.CallOption) (*DeleteFormulaResponse, error) {
	out := new(DeleteFormulaResponse)
	err := c.cc.Invoke(ctx, Basecoat_DeleteFormula_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) GetBase(ctx context.Context, in *GetBaseRequest, opts ...grpc.CallOption) (*GetBaseResponse, error) {
	out := new(GetBaseResponse)
	err := c.cc.Invoke(ctx, Basecoat_GetBase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) ListBases(ctx context.Context, in *ListBasesRequest, opts ...grpc.CallOption) (*ListBasesResponse, error) {
	out := new(ListBasesResponse)
	err := c.cc.Invoke(ctx, Basecoat_ListBases_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) CreateBase(ctx context.Context, in *CreateBaseRequest, opts ...grpc.CallOption) (*CreateBaseResponse, error) {
	out := new(CreateBaseResponse)
	err := c.cc.Invoke(ctx, Basecoat_CreateBase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) AssociateBaseWithFormula(ctx context.Context, in *AssociateBaseWithFormulaRequest, opts ...grpc.CallOption) (*AssociateBaseWithFormulaResponse, error) {
	out := new(AssociateBaseWithFormulaResponse)
	err := c.cc.Invoke(ctx, Basecoat_AssociateBaseWithFormula_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) DisassociateBaseFromFormula(ctx context.Context, in *DisassociateBaseFromFormulaRequest, opts ...grpc.CallOption) (*DisassociateBaseFromFormulaResponse, error) {
	out := new(DisassociateBaseFromFormulaResponse)
	err := c.cc.Invoke(ctx, Basecoat_DisassociateBaseFromFormula_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) UpdateBase(ctx context.Context, in *UpdateBaseRequest, opts ...grpc.CallOption) (*UpdateBaseResponse, error) {
	out := new(UpdateBaseResponse)
	err := c.cc.Invoke(ctx, Basecoat_UpdateBase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) DeleteBase(ctx context.Context, in *DeleteBaseRequest, opts ...grpc.CallOption) (*DeleteBaseResponse, error) {
	out := new(DeleteBaseResponse)
	err := c.cc.Invoke(ctx, Basecoat_DeleteBase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) GetColorant(ctx context.Context, in *GetColorantRequest, opts ...grpc.CallOption) (*GetColorantResponse, error) {
	out := new(GetColorantResponse)
	err := c.cc.Invoke(ctx, Basecoat_GetColorant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) ListColorants(ctx context.Context, in *ListColorantsRequest, opts ...grpc.CallOption) (*ListColorantsResponse, error) {
	out := new(ListColorantsResponse)
	err := c.cc.Invoke(ctx, Basecoat_ListColorants_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) CreateColorant(ctx context.Context, in *CreateColorantRequest, opts ...grpc.CallOption) (*CreateColorantResponse, error) {
	out := new(CreateColorantResponse)
	err := c.cc.Invoke(ctx, Basecoat_CreateColorant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) AssociateColorantWithFormula(ctx context.Context, in *AssociateColorantWithFormulaRequest, opts ...grpc.CallOption) (*AssociateColorantWithFormulaResponse, error) {
	out := new(AssociateColorantWithFormulaResponse)
	err := c.cc.Invoke(ctx, Basecoat_AssociateColorantWithFormula_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) DisassociateColorantFromFormula(ctx context.Context, in *DisassociateColorantFromFormulaRequest, opts ...grpc.CallOption) (*DisassociateColorantFromFormulaResponse, error) {
	out := new(DisassociateColorantFromFormulaResponse)
	err := c.cc.Invoke(ctx, Basecoat_DisassociateColorantFromFormula_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) UpdateColorant(ctx context.Context, in *UpdateColorantRequest, opts ...grpc.CallOption) (*UpdateColorantResponse, error) {
	out := new(UpdateColorantResponse)
	err := c.cc.Invoke(ctx, Basecoat_UpdateColorant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) DeleteColorant(ctx context.Context, in *DeleteColorantRequest, opts ...grpc.CallOption) (*DeleteColorantResponse, error) {
	out := new(DeleteColorantResponse)
	err := c.cc.Invoke(ctx, Basecoat_DeleteColorant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) GetContact(ctx context.Context, in *GetContactRequest, opts ...grpc.CallOption) (*GetContactResponse, error) {
	out := new(GetContactResponse)
	err := c.cc.Invoke(ctx, Basecoat_GetContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) ListContacts(ctx context.Context, in *ListContactsRequest, opts ...grpc.CallOption) (*ListContactsResponse, error) {
	out := new(ListContactsResponse)
	err := c.cc.Invoke(ctx, Basecoat_ListContacts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) CreateContact(ctx context.Context, in *CreateContactRequest, opts ...grpc.CallOption) (*CreateContactResponse, error) {
	out := new(CreateContactResponse)
	err := c.cc.Invoke(ctx, Basecoat_CreateContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) UpdateContact(ctx context.Context, in *UpdateContactRequest, opts ...grpc.CallOption) (*UpdateContactResponse, error) {
	out := new(UpdateContactResponse)
	err := c.cc.Invoke(ctx, Basecoat_UpdateContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*DeleteContactResponse, error) {
	out := new(DeleteContactResponse)
	err := c.cc.Invoke(ctx, Basecoat_DeleteContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) GetContractor(ctx context.Context, in *GetContractorRequest, opts ...grpc.CallOption) (*GetContractorResponse, error) {
	out := new(GetContractorResponse)
	err := c.cc.Invoke(ctx, Basecoat_GetContractor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) ListContractors(ctx context.Context, in *ListContractorsRequest, opts ...grpc.CallOption) (*ListContractorsResponse, error) {
	out := new(ListContractorsResponse)
	err := c.cc.Invoke(ctx, Basecoat_ListContractors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) CreateContractor(ctx context.Context, in *CreateContractorRequest, opts ...grpc.CallOption) (*CreateContractorResponse, error) {
	out := new(CreateContractorResponse)
	err := c.cc.Invoke(ctx, Basecoat_CreateContractor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) UpdateContractor(ctx context.Context, in *UpdateContractorRequest, opts ...grpc.CallOption) (*UpdateContractorResponse, error) {
	out := new(UpdateContractorResponse)
	err := c.cc.Invoke(ctx, Basecoat_UpdateContractor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) DeleteContractor(ctx context.Context, in *DeleteContractorRequest, opts ...grpc.CallOption) (*DeleteContractorResponse, error) {
	out := new(DeleteContractorResponse)
	err := c.cc.Invoke(ctx, Basecoat_DeleteContractor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error) {
	out := new(GetJobResponse)
	err := c.cc.Invoke(ctx, Basecoat_GetJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListJobsResponse, error) {
	out := new(ListJobsResponse)
	err := c.cc.Invoke(ctx, Basecoat_ListJobs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*CreateJobResponse, error) {
	out := new(CreateJobResponse)
	err := c.cc.Invoke(ctx, Basecoat_CreateJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) UpdateJob(ctx context.Context, in *UpdateJobRequest, opts ...grpc.CallOption) (*UpdateJobResponse, error) {
	out := new(UpdateJobResponse)
	err := c.cc.Invoke(ctx, Basecoat_UpdateJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basecoatClient) DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*DeleteJobResponse, error) {
	out := new(DeleteJobResponse)
	err := c.cc.Invoke(ctx, Basecoat_DeleteJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasecoatServer is the server API for Basecoat service.
// All implementations must embed UnimplementedBasecoatServer
// for forward compatibility
type BasecoatServer interface {
	// Authentication routes
	CreateAPIToken(context.Context, *CreateAPITokenRequest) (*CreateAPITokenResponse, error)
	// System routes
	GetSystemInfo(context.Context, *GetSystemInfoRequest) (*GetSystemInfoResponse, error)
	// Account routes (Admin only)
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error)
	ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error)
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error)
	ToggleAccountState(context.Context, *ToggleAccountStateRequest) (*ToggleAccountStateResponse, error)
	// Formula routes
	GetFormula(context.Context, *GetFormulaRequest) (*GetFormulaResponse, error)
	ListFormulas(context.Context, *ListFormulasRequest) (*ListFormulasResponse, error)
	CreateFormula(context.Context, *CreateFormulaRequest) (*CreateFormulaResponse, error)
	AssociateFormulaWithJob(context.Context, *AssociateFormulaWithJobRequest) (*AssociateFormulaWithJobResponse, error)
	DisassociateFormulaFromJob(context.Context, *DisassociateFormulaFromJobRequest) (*DisassociateFormulaFromJobResponse, error)
	UpdateFormula(context.Context, *UpdateFormulaRequest) (*UpdateFormulaResponse, error)
	DeleteFormula(context.Context, *DeleteFormulaRequest) (*DeleteFormulaResponse, error)
	// Base routes
	GetBase(context.Context, *GetBaseRequest) (*GetBaseResponse, error)
	ListBases(context.Context, *ListBasesRequest) (*ListBasesResponse, error)
	CreateBase(context.Context, *CreateBaseRequest) (*CreateBaseResponse, error)
	AssociateBaseWithFormula(context.Context, *AssociateBaseWithFormulaRequest) (*AssociateBaseWithFormulaResponse, error)
	DisassociateBaseFromFormula(context.Context, *DisassociateBaseFromFormulaRequest) (*DisassociateBaseFromFormulaResponse, error)
	UpdateBase(context.Context, *UpdateBaseRequest) (*UpdateBaseResponse, error)
	DeleteBase(context.Context, *DeleteBaseRequest) (*DeleteBaseResponse, error)
	// Colorant routes
	GetColorant(context.Context, *GetColorantRequest) (*GetColorantResponse, error)
	ListColorants(context.Context, *ListColorantsRequest) (*ListColorantsResponse, error)
	CreateColorant(context.Context, *CreateColorantRequest) (*CreateColorantResponse, error)
	AssociateColorantWithFormula(context.Context, *AssociateColorantWithFormulaRequest) (*AssociateColorantWithFormulaResponse, error)
	DisassociateColorantFromFormula(context.Context, *DisassociateColorantFromFormulaRequest) (*DisassociateColorantFromFormulaResponse, error)
	UpdateColorant(context.Context, *UpdateColorantRequest) (*UpdateColorantResponse, error)
	DeleteColorant(context.Context, *DeleteColorantRequest) (*DeleteColorantResponse, error)
	// Contact routes
	GetContact(context.Context, *GetContactRequest) (*GetContactResponse, error)
	ListContacts(context.Context, *ListContactsRequest) (*ListContactsResponse, error)
	CreateContact(context.Context, *CreateContactRequest) (*CreateContactResponse, error)
	UpdateContact(context.Context, *UpdateContactRequest) (*UpdateContactResponse, error)
	DeleteContact(context.Context, *DeleteContactRequest) (*DeleteContactResponse, error)
	// Contractor routes
	GetContractor(context.Context, *GetContractorRequest) (*GetContractorResponse, error)
	ListContractors(context.Context, *ListContractorsRequest) (*ListContractorsResponse, error)
	CreateContractor(context.Context, *CreateContractorRequest) (*CreateContractorResponse, error)
	UpdateContractor(context.Context, *UpdateContractorRequest) (*UpdateContractorResponse, error)
	DeleteContractor(context.Context, *DeleteContractorRequest) (*DeleteContractorResponse, error)
	// Job routes
	GetJob(context.Context, *GetJobRequest) (*GetJobResponse, error)
	ListJobs(context.Context, *ListJobsRequest) (*ListJobsResponse, error)
	CreateJob(context.Context, *CreateJobRequest) (*CreateJobResponse, error)
	UpdateJob(context.Context, *UpdateJobRequest) (*UpdateJobResponse, error)
	DeleteJob(context.Context, *DeleteJobRequest) (*DeleteJobResponse, error)
	mustEmbedUnimplementedBasecoatServer()
}

// UnimplementedBasecoatServer must be embedded to have forward compatible implementations.
type UnimplementedBasecoatServer struct {
}

func (UnimplementedBasecoatServer) CreateAPIToken(context.Context, *CreateAPITokenRequest) (*CreateAPITokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAPIToken not implemented")
}
func (UnimplementedBasecoatServer) GetSystemInfo(context.Context, *GetSystemInfoRequest) (*GetSystemInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemInfo not implemented")
}
func (UnimplementedBasecoatServer) GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedBasecoatServer) ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}
func (UnimplementedBasecoatServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedBasecoatServer) UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedBasecoatServer) ToggleAccountState(context.Context, *ToggleAccountStateRequest) (*ToggleAccountStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleAccountState not implemented")
}
func (UnimplementedBasecoatServer) GetFormula(context.Context, *GetFormulaRequest) (*GetFormulaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFormula not implemented")
}
func (UnimplementedBasecoatServer) ListFormulas(context.Context, *ListFormulasRequest) (*ListFormulasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFormulas not implemented")
}
func (UnimplementedBasecoatServer) CreateFormula(context.Context, *CreateFormulaRequest) (*CreateFormulaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFormula not implemented")
}
func (UnimplementedBasecoatServer) AssociateFormulaWithJob(context.Context, *AssociateFormulaWithJobRequest) (*AssociateFormulaWithJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssociateFormulaWithJob not implemented")
}
func (UnimplementedBasecoatServer) DisassociateFormulaFromJob(context.Context, *DisassociateFormulaFromJobRequest) (*DisassociateFormulaFromJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisassociateFormulaFromJob not implemented")
}
func (UnimplementedBasecoatServer) UpdateFormula(context.Context, *UpdateFormulaRequest) (*UpdateFormulaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFormula not implemented")
}
func (UnimplementedBasecoatServer) DeleteFormula(context.Context, *DeleteFormulaRequest) (*DeleteFormulaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFormula not implemented")
}
func (UnimplementedBasecoatServer) GetBase(context.Context, *GetBaseRequest) (*GetBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBase not implemented")
}
func (UnimplementedBasecoatServer) ListBases(context.Context, *ListBasesRequest) (*ListBasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBases not implemented")
}
func (UnimplementedBasecoatServer) CreateBase(context.Context, *CreateBaseRequest) (*CreateBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBase not implemented")
}
func (UnimplementedBasecoatServer) AssociateBaseWithFormula(context.Context, *AssociateBaseWithFormulaRequest) (*AssociateBaseWithFormulaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssociateBaseWithFormula not implemented")
}
func (UnimplementedBasecoatServer) DisassociateBaseFromFormula(context.Context, *DisassociateBaseFromFormulaRequest) (*DisassociateBaseFromFormulaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisassociateBaseFromFormula not implemented")
}
func (UnimplementedBasecoatServer) UpdateBase(context.Context, *UpdateBaseRequest) (*UpdateBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBase not implemented")
}
func (UnimplementedBasecoatServer) DeleteBase(context.Context, *DeleteBaseRequest) (*DeleteBaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBase not implemented")
}
func (UnimplementedBasecoatServer) GetColorant(context.Context, *GetColorantRequest) (*GetColorantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetColorant not implemented")
}
func (UnimplementedBasecoatServer) ListColorants(context.Context, *ListColorantsRequest) (*ListColorantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListColorants not implemented")
}
func (UnimplementedBasecoatServer) CreateColorant(context.Context, *CreateColorantRequest) (*CreateColorantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateColorant not implemented")
}
func (UnimplementedBasecoatServer) AssociateColorantWithFormula(context.Context, *AssociateColorantWithFormulaRequest) (*AssociateColorantWithFormulaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssociateColorantWithFormula not implemented")
}
func (UnimplementedBasecoatServer) DisassociateColorantFromFormula(context.Context, *DisassociateColorantFromFormulaRequest) (*DisassociateColorantFromFormulaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisassociateColorantFromFormula not implemented")
}
func (UnimplementedBasecoatServer) UpdateColorant(context.Context, *UpdateColorantRequest) (*UpdateColorantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateColorant not implemented")
}
func (UnimplementedBasecoatServer) DeleteColorant(context.Context, *DeleteColorantRequest) (*DeleteColorantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteColorant not implemented")
}
func (UnimplementedBasecoatServer) GetContact(context.Context, *GetContactRequest) (*GetContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContact not implemented")
}
func (UnimplementedBasecoatServer) ListContacts(context.Context, *ListContactsRequest) (*ListContactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContacts not implemented")
}
func (UnimplementedBasecoatServer) CreateContact(context.Context, *CreateContactRequest) (*CreateContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContact not implemented")
}
func (UnimplementedBasecoatServer) UpdateContact(context.Context, *UpdateContactRequest) (*UpdateContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContact not implemented")
}
func (UnimplementedBasecoatServer) DeleteContact(context.Context, *DeleteContactRequest) (*DeleteContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContact not implemented")
}
func (UnimplementedBasecoatServer) GetContractor(context.Context, *GetContractorRequest) (*GetContractorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractor not implemented")
}
func (UnimplementedBasecoatServer) ListContractors(context.Context, *ListContractorsRequest) (*ListContractorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContractors not implemented")
}
func (UnimplementedBasecoatServer) CreateContractor(context.Context, *CreateContractorRequest) (*CreateContractorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContractor not implemented")
}
func (UnimplementedBasecoatServer) UpdateContractor(context.Context, *UpdateContractorRequest) (*UpdateContractorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContractor not implemented")
}
func (UnimplementedBasecoatServer) DeleteContractor(context.Context, *DeleteContractorRequest) (*DeleteContractorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContractor not implemented")
}
func (UnimplementedBasecoatServer) GetJob(context.Context, *GetJobRequest) (*GetJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (UnimplementedBasecoatServer) ListJobs(context.Context, *ListJobsRequest) (*ListJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobs not implemented")
}
func (UnimplementedBasecoatServer) CreateJob(context.Context, *CreateJobRequest) (*CreateJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJob not implemented")
}
func (UnimplementedBasecoatServer) UpdateJob(context.Context, *UpdateJobRequest) (*UpdateJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJob not implemented")
}
func (UnimplementedBasecoatServer) DeleteJob(context.Context, *DeleteJobRequest) (*DeleteJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJob not implemented")
}
func (UnimplementedBasecoatServer) mustEmbedUnimplementedBasecoatServer() {}

// UnsafeBasecoatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BasecoatServer will
// result in compilation errors.
type UnsafeBasecoatServer interface {
	mustEmbedUnimplementedBasecoatServer()
}

func RegisterBasecoatServer(s grpc.ServiceRegistrar, srv BasecoatServer) {
	s.RegisterService(&Basecoat_ServiceDesc, srv)
}

func _Basecoat_CreateAPIToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAPITokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).CreateAPIToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_CreateAPIToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).CreateAPIToken(ctx, req.(*CreateAPITokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_GetSystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).GetSystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_GetSystemInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).GetSystemInfo(ctx, req.(*GetSystemInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_ListAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).ListAccounts(ctx, req.(*ListAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_UpdateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_ToggleAccountState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleAccountStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).ToggleAccountState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_ToggleAccountState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).ToggleAccountState(ctx, req.(*ToggleAccountStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_GetFormula_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFormulaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).GetFormula(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_GetFormula_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).GetFormula(ctx, req.(*GetFormulaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_ListFormulas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFormulasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).ListFormulas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_ListFormulas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).ListFormulas(ctx, req.(*ListFormulasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_CreateFormula_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFormulaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).CreateFormula(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_CreateFormula_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).CreateFormula(ctx, req.(*CreateFormulaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_AssociateFormulaWithJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssociateFormulaWithJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).AssociateFormulaWithJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_AssociateFormulaWithJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).AssociateFormulaWithJob(ctx, req.(*AssociateFormulaWithJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_DisassociateFormulaFromJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisassociateFormulaFromJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).DisassociateFormulaFromJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_DisassociateFormulaFromJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).DisassociateFormulaFromJob(ctx, req.(*DisassociateFormulaFromJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_UpdateFormula_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFormulaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).UpdateFormula(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_UpdateFormula_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).UpdateFormula(ctx, req.(*UpdateFormulaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_DeleteFormula_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFormulaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).DeleteFormula(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_DeleteFormula_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).DeleteFormula(ctx, req.(*DeleteFormulaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_GetBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).GetBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_GetBase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).GetBase(ctx, req.(*GetBaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_ListBases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).ListBases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_ListBases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).ListBases(ctx, req.(*ListBasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_CreateBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).CreateBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_CreateBase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).CreateBase(ctx, req.(*CreateBaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_AssociateBaseWithFormula_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssociateBaseWithFormulaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).AssociateBaseWithFormula(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_AssociateBaseWithFormula_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).AssociateBaseWithFormula(ctx, req.(*AssociateBaseWithFormulaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_DisassociateBaseFromFormula_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisassociateBaseFromFormulaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).DisassociateBaseFromFormula(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_DisassociateBaseFromFormula_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).DisassociateBaseFromFormula(ctx, req.(*DisassociateBaseFromFormulaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_UpdateBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).UpdateBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_UpdateBase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).UpdateBase(ctx, req.(*UpdateBaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_DeleteBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).DeleteBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_DeleteBase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).DeleteBase(ctx, req.(*DeleteBaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_GetColorant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetColorantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).GetColorant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_GetColorant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).GetColorant(ctx, req.(*GetColorantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_ListColorants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListColorantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).ListColorants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_ListColorants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).ListColorants(ctx, req.(*ListColorantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_CreateColorant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateColorantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).CreateColorant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_CreateColorant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).CreateColorant(ctx, req.(*CreateColorantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_AssociateColorantWithFormula_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssociateColorantWithFormulaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).AssociateColorantWithFormula(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_AssociateColorantWithFormula_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).AssociateColorantWithFormula(ctx, req.(*AssociateColorantWithFormulaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_DisassociateColorantFromFormula_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisassociateColorantFromFormulaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).DisassociateColorantFromFormula(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_DisassociateColorantFromFormula_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).DisassociateColorantFromFormula(ctx, req.(*DisassociateColorantFromFormulaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_UpdateColorant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateColorantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).UpdateColorant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_UpdateColorant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).UpdateColorant(ctx, req.(*UpdateColorantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_DeleteColorant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteColorantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).DeleteColorant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_DeleteColorant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).DeleteColorant(ctx, req.(*DeleteColorantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_GetContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).GetContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_GetContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).GetContact(ctx, req.(*GetContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_ListContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).ListContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_ListContacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).ListContacts(ctx, req.(*ListContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_CreateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).CreateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_CreateContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).CreateContact(ctx, req.(*CreateContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_UpdateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).UpdateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_UpdateContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).UpdateContact(ctx, req.(*UpdateContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_DeleteContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).DeleteContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_DeleteContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).DeleteContact(ctx, req.(*DeleteContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_GetContractor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).GetContractor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_GetContractor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).GetContractor(ctx, req.(*GetContractorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_ListContractors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContractorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).ListContractors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_ListContractors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).ListContractors(ctx, req.(*ListContractorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_CreateContractor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContractorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).CreateContractor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_CreateContractor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).CreateContractor(ctx, req.(*CreateContractorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_UpdateContractor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContractorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).UpdateContractor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_UpdateContractor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).UpdateContractor(ctx, req.(*UpdateContractorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_DeleteContractor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContractorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).DeleteContractor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_DeleteContractor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).DeleteContractor(ctx, req.(*DeleteContractorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_GetJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).GetJob(ctx, req.(*GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_ListJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).ListJobs(ctx, req.(*ListJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_CreateJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).CreateJob(ctx, req.(*CreateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_UpdateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).UpdateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_UpdateJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).UpdateJob(ctx, req.(*UpdateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Basecoat_DeleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasecoatServer).DeleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Basecoat_DeleteJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasecoatServer).DeleteJob(ctx, req.(*DeleteJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Basecoat_ServiceDesc is the grpc.ServiceDesc for Basecoat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Basecoat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Basecoat",
	HandlerType: (*BasecoatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAPIToken",
			Handler:    _Basecoat_CreateAPIToken_Handler,
		},
		{
			MethodName: "GetSystemInfo",
			Handler:    _Basecoat_GetSystemInfo_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _Basecoat_GetAccount_Handler,
		},
		{
			MethodName: "ListAccounts",
			Handler:    _Basecoat_ListAccounts_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _Basecoat_CreateAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _Basecoat_UpdateAccount_Handler,
		},
		{
			MethodName: "ToggleAccountState",
			Handler:    _Basecoat_ToggleAccountState_Handler,
		},
		{
			MethodName: "GetFormula",
			Handler:    _Basecoat_GetFormula_Handler,
		},
		{
			MethodName: "ListFormulas",
			Handler:    _Basecoat_ListFormulas_Handler,
		},
		{
			MethodName: "CreateFormula",
			Handler:    _Basecoat_CreateFormula_Handler,
		},
		{
			MethodName: "AssociateFormulaWithJob",
			Handler:    _Basecoat_AssociateFormulaWithJob_Handler,
		},
		{
			MethodName: "DisassociateFormulaFromJob",
			Handler:    _Basecoat_DisassociateFormulaFromJob_Handler,
		},
		{
			MethodName: "UpdateFormula",
			Handler:    _Basecoat_UpdateFormula_Handler,
		},
		{
			MethodName: "DeleteFormula",
			Handler:    _Basecoat_DeleteFormula_Handler,
		},
		{
			MethodName: "GetBase",
			Handler:    _Basecoat_GetBase_Handler,
		},
		{
			MethodName: "ListBases",
			Handler:    _Basecoat_ListBases_Handler,
		},
		{
			MethodName: "CreateBase",
			Handler:    _Basecoat_CreateBase_Handler,
		},
		{
			MethodName: "AssociateBaseWithFormula",
			Handler:    _Basecoat_AssociateBaseWithFormula_Handler,
		},
		{
			MethodName: "DisassociateBaseFromFormula",
			Handler:    _Basecoat_DisassociateBaseFromFormula_Handler,
		},
		{
			MethodName: "UpdateBase",
			Handler:    _Basecoat_UpdateBase_Handler,
		},
		{
			MethodName: "DeleteBase",
			Handler:    _Basecoat_DeleteBase_Handler,
		},
		{
			MethodName: "GetColorant",
			Handler:    _Basecoat_GetColorant_Handler,
		},
		{
			MethodName: "ListColorants",
			Handler:    _Basecoat_ListColorants_Handler,
		},
		{
			MethodName: "CreateColorant",
			Handler:    _Basecoat_CreateColorant_Handler,
		},
		{
			MethodName: "AssociateColorantWithFormula",
			Handler:    _Basecoat_AssociateColorantWithFormula_Handler,
		},
		{
			MethodName: "DisassociateColorantFromFormula",
			Handler:    _Basecoat_DisassociateColorantFromFormula_Handler,
		},
		{
			MethodName: "UpdateColorant",
			Handler:    _Basecoat_UpdateColorant_Handler,
		},
		{
			MethodName: "DeleteColorant",
			Handler:    _Basecoat_DeleteColorant_Handler,
		},
		{
			MethodName: "GetContact",
			Handler:    _Basecoat_GetContact_Handler,
		},
		{
			MethodName: "ListContacts",
			Handler:    _Basecoat_ListContacts_Handler,
		},
		{
			MethodName: "CreateContact",
			Handler:    _Basecoat_CreateContact_Handler,
		},
		{
			MethodName: "UpdateContact",
			Handler:    _Basecoat_UpdateContact_Handler,
		},
		{
			MethodName: "DeleteContact",
			Handler:    _Basecoat_DeleteContact_Handler,
		},
		{
			MethodName: "GetContractor",
			Handler:    _Basecoat_GetContractor_Handler,
		},
		{
			MethodName: "ListContractors",
			Handler:    _Basecoat_ListContractors_Handler,
		},
		{
			MethodName: "CreateContractor",
			Handler:    _Basecoat_CreateContractor_Handler,
		},
		{
			MethodName: "UpdateContractor",
			Handler:    _Basecoat_UpdateContractor_Handler,
		},
		{
			MethodName: "DeleteContractor",
			Handler:    _Basecoat_DeleteContractor_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _Basecoat_GetJob_Handler,
		},
		{
			MethodName: "ListJobs",
			Handler:    _Basecoat_ListJobs_Handler,
		},
		{
			MethodName: "CreateJob",
			Handler:    _Basecoat_CreateJob_Handler,
		},
		{
			MethodName: "UpdateJob",
			Handler:    _Basecoat_UpdateJob_Handler,
		},
		{
			MethodName: "DeleteJob",
			Handler:    _Basecoat_DeleteJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "basecoat.proto",
}
